!function (t, a, e) { "function" == typeof define && define.amd ? define(["jquery"], t) : "object" == typeof exports ? module.exports = t(require("jquery")) : t(a || e) }(function (i) { "use strict"; var c = function (k, b, w) { var j = { invalid: [], getCaret: function () { try { var t, a = 0, e = k.get(0), n = document.selection, s = e.selectionStart; return n && -1 === navigator.appVersion.indexOf("MSIE 10") ? ((t = n.createRange()).moveStart("character", -j.val().length), a = t.text.length) : (s || "0" === s) && (a = s), a } catch (t) { } }, setCaret: function (t) { try { if (k.is(":focus")) { var a, e = k.get(0); e.setSelectionRange ? e.setSelectionRange(t, t) : ((a = e.createTextRange()).collapse(!0), a.moveEnd("character", t), a.moveStart("character", t), a.select()) } } catch (t) { } }, events: function () { k.on("keydown.mask", function (t) { k.data("mask-keycode", t.keyCode || t.which), k.data("mask-previus-value", k.val()), k.data("mask-previus-caret-pos", j.getCaret()), j.maskDigitPosMapOld = j.maskDigitPosMap }).on(i.jMaskGlobals.useInput ? "input.mask" : "keyup.mask", j.behaviour).on("paste.mask drop.mask", function () { setTimeout(function () { k.keydown().keyup() }, 100) }).on("change.mask", function () { k.data("changed", !0) }).on("blur.mask", function () { o === j.val() || k.data("changed") || k.trigger("change"), k.data("changed", !1) }).on("blur.mask", function () { o = j.val() }).on("focus.mask", function (t) { !0 === w.selectOnFocus && i(t.target).select() }).on("focusout.mask", function () { w.clearIfNotMatch && !r.test(j.val()) && j.val("") }) }, getRegexMask: function () { for (var t, a, e, n, s, r, o = [], i = 0; i < b.length; i++)(t = C.translation[b.charAt(i)]) ? (a = t.pattern.toString().replace(/.{1}$|^.{1}/g, ""), e = t.optional, (n = t.recursive) ? (o.push(b.charAt(i)), s = { digit: b.charAt(i), pattern: a }) : o.push(e || n ? a + "?" : a)) : o.push(b.charAt(i).replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")); return r = o.join(""), s && (r = r.replace(new RegExp("(" + s.digit + "(.*" + s.digit + ")?)"), "($1)?").replace(new RegExp(s.digit, "g"), s.pattern)), new RegExp(r) }, destroyEvents: function () { k.off(["input", "keydown", "keyup", "paste", "drop", "blur", "focusout", ""].join(".mask ")) }, val: function (t) { var a, e = k.is("input") ? "val" : "text"; return 0 < arguments.length ? (k[e]() !== t && k[e](t), a = k) : a = k[e](), a }, calculateCaretPosition: function () { var t = k.data("mask-previus-value") || "", a = j.getMasked(), e = j.getCaret(); if (t !== a) { var n = k.data("mask-previus-caret-pos") || 0, s = a.length, r = t.length, o = 0, i = 0, c = 0, l = 0, u = 0; for (u = e; u < s && j.maskDigitPosMap[u]; u++)i++; for (u = e - 1; 0 <= u && j.maskDigitPosMap[u]; u--)o++; for (u = e - 1; 0 <= u; u--)j.maskDigitPosMap[u] && c++; for (u = n - 1; 0 <= u; u--)j.maskDigitPosMapOld[u] && l++; if (r < e) e = 10 * s; else if (e <= n && n !== r) { if (!j.maskDigitPosMapOld[e]) { var f = e; e -= l - c, e -= o, j.maskDigitPosMap[e] && (e = f) } } else n < e && (e += c - l, e += i) } return e }, behaviour: function (t) { t = t || window.event, j.invalid = []; var a = k.data("mask-keycode"); if (-1 === i.inArray(a, C.byPassKeys)) { var e = j.getMasked(), n = j.getCaret(); return setTimeout(function () { j.setCaret(j.calculateCaretPosition()) }, 10), j.val(e), j.setCaret(n), j.callbacks(t) } }, getMasked: function (t, a) { var e, n, s, r = [], o = void 0 === a ? j.val() : a + "", i = 0, c = b.length, l = 0, u = o.length, f = 1, k = "push", v = -1, p = 0, d = []; for (w.reverse ? (k = "unshift", f = -1, e = 0, i = c - 1, l = u - 1, n = function () { return -1 < i && -1 < l }) : (e = c - 1, n = function () { return i < c && l < u }); n();) { var h = b.charAt(i), g = o.charAt(l), m = C.translation[h]; m ? (g.match(m.pattern) ? (r[k](g), m.recursive && (-1 === v ? v = i : i === e && i !== v && (i = v - f), e === v && (i -= f)), i += f) : g === s ? (p-- , s = void 0) : m.optional ? (i += f, l -= f) : m.fallback ? (r[k](m.fallback), i += f, l -= f) : j.invalid.push({ p: l, v: g, e: m.pattern }), l += f) : (t || r[k](h), g === h ? (d.push(l), l += f) : (s = h, d.push(l + p), p++), i += f) } var M = b.charAt(e); c !== u + 1 || C.translation[M] || r.push(M); var y = r.join(""); return j.mapMaskdigitPositions(y, d, u), y }, mapMaskdigitPositions: function (t, a, e) { var n = w.reverse ? t.length - e : 0; j.maskDigitPosMap = {}; for (var s = 0; s < a.length; s++)j.maskDigitPosMap[a[s] + n] = 1 }, callbacks: function (t) { var a = j.val(), e = a !== o, n = [a, t, k, w], s = function (t, a, e) { "function" == typeof w[t] && a && w[t].apply(this, e) }; s("onChange", !0 === e, n), s("onKeyPress", !0 === e, n), s("onComplete", a.length === b.length, n), s("onInvalid", 0 < j.invalid.length, [a, t, k, j.invalid, w]) } }; k = i(k); var r, C = this, o = j.val(); b = "function" == typeof b ? b(j.val(), void 0, k, w) : b, C.mask = b, C.options = w, C.remove = function () { var t = j.getCaret(); return j.destroyEvents(), j.val(C.getCleanVal()), j.setCaret(t), k }, C.getCleanVal = function () { return j.getMasked(!0) }, C.getMaskedVal = function (t) { return j.getMasked(!1, t) }, C.init = function (t) { if (t = t || !1, w = w || {}, C.clearIfNotMatch = i.jMaskGlobals.clearIfNotMatch, C.byPassKeys = i.jMaskGlobals.byPassKeys, C.translation = i.extend({}, i.jMaskGlobals.translation, w.translation), C = i.extend(!0, {}, C, w), r = j.getRegexMask(), t) j.events(), j.val(j.getMasked()); else { w.placeholder && k.attr("placeholder", w.placeholder), k.data("mask") && k.attr("autocomplete", "off"); for (var a = 0, e = !0; a < b.length; a++) { var n = C.translation[b.charAt(a)]; if (n && n.recursive) { e = !1; break } } e && k.attr("maxlength", b.length), j.destroyEvents(), j.events(); var s = j.getCaret(); j.val(j.getMasked()), j.setCaret(s) } }, C.init(!k.is("input")) }; i.maskWatchers = {}; var a = function () { var t = i(this), a = {}, e = "data-mask-", n = t.attr("data-mask"); if (t.attr(e + "reverse") && (a.reverse = !0), t.attr(e + "clearifnotmatch") && (a.clearIfNotMatch = !0), "true" === t.attr(e + "selectonfocus") && (a.selectOnFocus = !0), l(t, n, a)) return t.data("mask", new c(this, n, a)) }, l = function (t, a, e) { e = e || {}; var n = i(t).data("mask"), s = JSON.stringify, r = i(t).val() || i(t).text(); try { return "function" == typeof a && (a = a(r)), "object" != typeof n || s(n.options) !== s(e) || n.mask !== a } catch (t) { } }; i.fn.mask = function (t, a) { a = a || {}; var e = this.selector, n = i.jMaskGlobals, s = n.watchInterval, r = a.watchInputs || n.watchInputs, o = function () { if (l(this, t, a)) return i(this).data("mask", new c(this, t, a)) }; return i(this).each(o), e && "" !== e && r && (clearInterval(i.maskWatchers[e]), i.maskWatchers[e] = setInterval(function () { i(document).find(e).each(o) }, s)), this }, i.fn.masked = function (t) { return this.data("mask").getMaskedVal(t) }, i.fn.unmask = function () { return clearInterval(i.maskWatchers[this.selector]), delete i.maskWatchers[this.selector], this.each(function () { var t = i(this).data("mask"); t && t.remove().removeData("mask") }) }, i.fn.cleanVal = function () { return this.data("mask").getCleanVal() }, i.applyDataMask = function (t) { ((t = t || i.jMaskGlobals.maskElements) instanceof i ? t : i(t)).filter(i.jMaskGlobals.dataMaskAttr).each(a) }; var t, e, n, s = { maskElements: "input,td,span,div", dataMaskAttr: "*[data-mask]", dataMask: !0, watchInterval: 300, watchInputs: !0, useInput: !/Chrome\/[2-4][0-9]|SamsungBrowser/.test(window.navigator.userAgent) && (t = "input", n = document.createElement("div"), (e = (t = "on" + t) in n) || (n.setAttribute(t, "return;"), e = "function" == typeof n[t]), n = null, e), watchDataMask: !1, byPassKeys: [9, 16, 17, 18, 36, 37, 38, 39, 40, 91], translation: { 0: { pattern: /\d/ }, 9: { pattern: /\d/, optional: !0 }, "#": { pattern: /\d/, recursive: !0 }, A: { pattern: /[a-zA-Z0-9]/ }, S: { pattern: /[a-zA-Z]/ } } }; i.jMaskGlobals = i.jMaskGlobals || {}, (s = i.jMaskGlobals = i.extend(!0, {}, s, i.jMaskGlobals)).dataMask && i.applyDataMask(), setInterval(function () { i.jMaskGlobals.watchDataMask && i.applyDataMask() }, s.watchInterval) }, window.jQuery, window.Zepto);